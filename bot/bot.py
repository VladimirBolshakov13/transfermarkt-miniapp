import os
import random
import aiohttp
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv

load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
TOKEN = os.getenv("TOKEN")
API_URL = "http://127.0.0.1:8000"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
games = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ API Transfermarkt
async def fetch_random_player():
    random_player_id = random.randint(1, 10000)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ID –∏–≥—Ä–æ–∫–∞ –ª–µ–∂–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-10000
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{API_URL}/players/{random_player_id}/profile") as response:
                if response.status == 200:
                    return await response.json()
                else:
                    print(f"–û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ {response.status}")
                    return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞
async def get_player_achievements(player_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ ID."""
    async with aiohttp.ClientSession() as session:
        url = f"{API_URL}/players/{player_id}/achievements"
        try:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                    return data.get("achievements", [])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏–≥—Ä–æ–∫–∞
async def handle_achievement_question(player_id, question):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏–≥—Ä–æ–∫–∞."""
    achievements = await get_player_achievements(player_id)
    
    if "–∑–æ–ª–æ—Ç–æ–π –º—è—á" in question:
        for achievement in achievements:
            if achievement["title"] == "Winner Ballon d'Or":
                count = achievement["count"]
                seasons = ", ".join([detail["season"]["name"] for detail in achievement["details"]])
                return f"–î–∞, –æ–Ω –≤—ã–∏–≥—Ä–∞–ª –ó–æ–ª–æ—Ç–æ–π –º—è—á {count} —Ä–∞–∑(–∞): {seasons}."
        return "–ù–µ—Ç, –æ–Ω –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–ª –ó–æ–ª–æ—Ç–æ–π –º—è—á."
    
    if "–ª—É—á—à–∏–π –∏–≥—Ä–æ–∫ fifa" in question:
        for achievement in achievements:
            if achievement["title"] == "The Best FIFA Men's Player":
                count = achievement["count"]
                seasons = ", ".join([detail["season"]["name"] for detail in achievement["details"]])
                return f"–î–∞, –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª—É—á—à–∏–º –∏–≥—Ä–æ–∫–æ–º FIFA {count} —Ä–∞–∑(–∞): {seasons}."
        return "–ù–µ—Ç, –æ–Ω –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª—É—á—à–∏–º –∏–≥—Ä–æ–∫–æ–º FIFA."

    return "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, –æ –∫–∞–∫–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∏–¥–µ—Ç —Ä–µ—á—å."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
async def handle_position_question(player_traits, question):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞."""
    position = player_traits["position"]["main"].lower()
    
    if "–≤—Ä–∞—Ç–∞—Ä—å" in question:
        return "–î–∞" if position == "goalkeeper" else "–ù–µ—Ç"
    if "–∑–∞—â–∏—Ç–Ω–∏–∫" in question:
        return "–î–∞" if position == "defender" else "–ù–µ—Ç"
    if "–ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫" in question:
        return "–î–∞" if position == "midfielder" else "–ù–µ—Ç"
    if "–Ω–∞–ø–∞–¥–∞—é—â–∏–π" in question:
        return "–î–∞" if position == "forward" else "–ù–µ—Ç"
    
    return "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, –æ –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–¥–µ—Ç —Ä–µ—á—å."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
@router.message(Command("startgame"))
async def start_game(message: Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–º —Å–ª—É—á–∞–π–Ω–æ–º –∏–≥—Ä–æ–∫–µ
    player = await fetch_random_player()
    if not player:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    random_player_name = player["name"]
    
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    games[user_id] = {
        "player_name": random_player_name,
        "player_id": player["id"],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–≥—Ä–æ–∫–∞
        "questions_asked": 0,
        "max_questions": 10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å
        "traits": player,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ API
    }

    # –°–æ–æ–±—â–∞–µ–º –∏–≥—Ä–æ–∫—É, —á—Ç–æ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
    await message.answer(f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å, –∫—Ç–æ —ç—Ç–æ!\n–£ –≤–∞—Å {games[user_id]['max_questions']} –ø–æ–ø—ã—Ç–æ–∫!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@router.message()
async def ask_question(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if user_id not in games:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /startgame.")
        return

    game_data = games[user_id]
    player_name = game_data["player_name"]
    player_id = game_data["player_id"]
    player_traits = game_data["traits"]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    if game_data["questions_asked"] >= game_data["max_questions"]:
        await message.answer(f"–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ò–≥—Ä–æ–∫ –±—ã–ª {player_name}. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /startgame.")
        del games[user_id]  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    question = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≥–∞–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞
    if question.startswith("—ç—Ç–æ ") and question.endswith("?"):
        guessed_player_name = question[4:-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞
        if guessed_player_name.lower() == player_name.lower():
            await message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏: {player_name}.")
            del games[user_id]  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            return
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–æ–∑–∏—Ü–∏—è—Ö
    position_response = await handle_position_question(player_traits, question)
    if position_response != "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, –æ –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–¥–µ—Ç —Ä–µ—á—å.":
        await message.answer(f"–û—Ç–≤–µ—Ç: {position_response}")
        game_data["questions_asked"] += 1
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    if "–∑–æ–ª–æ—Ç–æ–π –º—è—á" in question or "–ª—É—á—à–∏–π –∏–≥—Ä–æ–∫ fifa" in question:
        answer = await handle_achievement_question(player_id, question)
        await message.answer(f"–û—Ç–≤–µ—Ç: {answer}")
        game_data["questions_asked"] += 1
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    game_data["questions_asked"] += 1

    await message.answer("–Ø –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
@router.message(Command("guess"))
async def guess_player(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if user_id not in games:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /startgame.")
        return

    game_data = games[user_id]
    player_name = game_data["player_name"]

    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥—É–º–∞–µ—Ç, —á—Ç–æ —É–≥–∞–¥–∞–ª
    guessed_player_name = message.text.split(" ", 1)[1].strip()
    if guessed_player_name.lower() == player_name.lower():
        await message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏: {player_name}.")
        del games[user_id]  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

# –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@router.message(Command("info"))
async def info(message: Message):
    await message.answer("–≠—Ç–∞ –∏–≥—Ä–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —É–≥–∞–¥–∞—Ç—å —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã.")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
dp.include_router(router)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ executor
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
